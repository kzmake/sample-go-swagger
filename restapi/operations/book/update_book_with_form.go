// Code generated by go-swagger; DO NOT EDIT.

package book

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// UpdateBookWithFormHandlerFunc turns a function with the right signature into a update book with form handler
type UpdateBookWithFormHandlerFunc func(UpdateBookWithFormParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn UpdateBookWithFormHandlerFunc) Handle(params UpdateBookWithFormParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// UpdateBookWithFormHandler interface for that can handle valid update book with form params
type UpdateBookWithFormHandler interface {
	Handle(UpdateBookWithFormParams, interface{}) middleware.Responder
}

// NewUpdateBookWithForm creates a new http.Handler for the update book with form operation
func NewUpdateBookWithForm(ctx *middleware.Context, handler UpdateBookWithFormHandler) *UpdateBookWithForm {
	return &UpdateBookWithForm{Context: ctx, Handler: handler}
}

/*UpdateBookWithForm swagger:route POST /book/{bookId} book updateBookWithForm

Updates a book in the bookshelf with form data

*/
type UpdateBookWithForm struct {
	Context *middleware.Context
	Handler UpdateBookWithFormHandler
}

func (o *UpdateBookWithForm) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewUpdateBookWithFormParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
