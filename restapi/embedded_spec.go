// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Bookshelf server. 本棚アプリケーションのサンプル。",
    "title": "Swagger Bookshelf",
    "termsOfService": "http://www.example.com/terms/",
    "contact": {
      "email": "hoge@example.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "www.example.com",
  "basePath": "/v1",
  "paths": {
    "/book": {
      "put": {
        "security": [
          {
            "bookshelf_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Update an existing book",
        "operationId": "updateBook",
        "parameters": [
          {
            "description": "Book object that needs to be added to the bookshelf",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "x-swagger-router-controller": "Book"
      },
      "post": {
        "security": [
          {
            "bookshelf_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Add a new book to the bookshlef",
        "operationId": "addBook",
        "parameters": [
          {
            "description": "Book object that needs to be added to the bookshelf",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "x-swagger-router-controller": "Book"
      }
    },
    "/book/{bookId}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns a single book",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Find book by ID",
        "operationId": "getBookById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of book to return",
            "name": "bookId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          }
        },
        "x-swagger-router-controller": "Book"
      },
      "post": {
        "security": [
          {
            "bookshelf_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Updates a book in the bookshelf with form data",
        "operationId": "updateBookWithForm",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of book that needs to be updated",
            "name": "bookId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Updated name of the book",
            "name": "name",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Updated status of the book",
            "name": "status",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "x-swagger-router-controller": "Book"
      },
      "delete": {
        "security": [
          {
            "bookshelf_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Deletes a book",
        "operationId": "deleteBook",
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Book id to delete",
            "name": "bookId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          }
        },
        "x-swagger-router-controller": "Book"
      }
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-swagger-router-controller": "User"
      }
    },
    "/user/login": {
      "get": {
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "type": "string",
            "description": "The user name for login",
            "name": "username",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The password for login in clear text",
            "name": "password",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "x-swagger-router-controller": "User"
      }
    },
    "/user/logout": {
      "get": {
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-swagger-router-controller": "User"
      }
    },
    "/user/{username}": {
      "get": {
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-swagger-router-controller": "User"
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "name that need to be updated",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-swagger-router-controller": "User"
      },
      "delete": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be deleted",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-swagger-router-controller": "User"
      }
    }
  },
  "definitions": {
    "Book": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "status": {
          "description": "book status in the bookshelf",
          "type": "string",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Book"
      },
      "example": {
        "id": 0,
        "name": "doggie",
        "status": "available"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      },
      "example": {
        "email": "email",
        "firstName": "firstName",
        "id": 0,
        "lastName": "lastName",
        "password": "password",
        "phone": "phone",
        "userStatus": 6,
        "username": "username"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "bookshelf_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "http://www.example.com/oauth/dialog",
      "scopes": {
        "read:books": "read your books",
        "write:books": "modify books in your account"
      }
    }
  },
  "tags": [
    {
      "description": "Everything about your Books",
      "name": "book",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "description": "Operations about user",
      "name": "user",
      "externalDocs": {
        "description": "Find out more about our bookshlef",
        "url": "http://swagger.io"
      }
    }
  ],
  "externalDocs": {
    "description": "Swaggerについて詳細はコチラ",
    "url": "http://swagger.io"
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Bookshelf server. 本棚アプリケーションのサンプル。",
    "title": "Swagger Bookshelf",
    "termsOfService": "http://www.example.com/terms/",
    "contact": {
      "email": "hoge@example.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "www.example.com",
  "basePath": "/v1",
  "paths": {
    "/book": {
      "put": {
        "security": [
          {
            "bookshelf_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Update an existing book",
        "operationId": "updateBook",
        "parameters": [
          {
            "description": "Book object that needs to be added to the bookshelf",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "x-swagger-router-controller": "Book"
      },
      "post": {
        "security": [
          {
            "bookshelf_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Add a new book to the bookshlef",
        "operationId": "addBook",
        "parameters": [
          {
            "description": "Book object that needs to be added to the bookshelf",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Book"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "x-swagger-router-controller": "Book"
      }
    },
    "/book/{bookId}": {
      "get": {
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns a single book",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Find book by ID",
        "operationId": "getBookById",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of book to return",
            "name": "bookId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Book"
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          }
        },
        "x-swagger-router-controller": "Book"
      },
      "post": {
        "security": [
          {
            "bookshelf_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Updates a book in the bookshelf with form data",
        "operationId": "updateBookWithForm",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "description": "ID of book that needs to be updated",
            "name": "bookId",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Updated name of the book",
            "name": "name",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Updated status of the book",
            "name": "status",
            "in": "formData"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "x-swagger-router-controller": "Book"
      },
      "delete": {
        "security": [
          {
            "bookshelf_auth": [
              "write:books",
              "read:books"
            ]
          }
        ],
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "book"
        ],
        "summary": "Deletes a book",
        "operationId": "deleteBook",
        "parameters": [
          {
            "type": "string",
            "name": "api_key",
            "in": "header"
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "Book id to delete",
            "name": "bookId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Book not found"
          }
        },
        "x-swagger-router-controller": "Book"
      }
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "parameters": [
          {
            "description": "Created user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-swagger-router-controller": "User"
      }
    },
    "/user/login": {
      "get": {
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "type": "string",
            "description": "The user name for login",
            "name": "username",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "The password for login in clear text",
            "name": "password",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            },
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "x-swagger-router-controller": "User"
      }
    },
    "/user/logout": {
      "get": {
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "x-swagger-router-controller": "User"
      }
    },
    "/user/{username}": {
      "get": {
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-swagger-router-controller": "User"
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "operationId": "updateUser",
        "parameters": [
          {
            "type": "string",
            "description": "name that need to be updated",
            "name": "username",
            "in": "path",
            "required": true
          },
          {
            "description": "Updated user object",
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-swagger-router-controller": "User"
      },
      "delete": {
        "description": "This can only be done by the logged in user.",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "type": "string",
            "description": "The name that needs to be deleted",
            "name": "username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "x-swagger-router-controller": "User"
      }
    }
  },
  "definitions": {
    "Book": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "example": "doggie"
        },
        "status": {
          "description": "book status in the bookshelf",
          "type": "string",
          "enum": [
            "available",
            "pending",
            "sold"
          ]
        }
      },
      "xml": {
        "name": "Book"
      },
      "example": {
        "id": 0,
        "name": "doggie",
        "status": "available"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        },
        "username": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      },
      "example": {
        "email": "email",
        "firstName": "firstName",
        "id": 0,
        "lastName": "lastName",
        "password": "password",
        "phone": "phone",
        "userStatus": 6,
        "username": "username"
      }
    }
  },
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "name": "api_key",
      "in": "header"
    },
    "bookshelf_auth": {
      "type": "oauth2",
      "flow": "implicit",
      "authorizationUrl": "http://www.example.com/oauth/dialog",
      "scopes": {
        "read:books": "read your books",
        "write:books": "modify books in your account"
      }
    }
  },
  "tags": [
    {
      "description": "Everything about your Books",
      "name": "book",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "description": "Operations about user",
      "name": "user",
      "externalDocs": {
        "description": "Find out more about our bookshlef",
        "url": "http://swagger.io"
      }
    }
  ],
  "externalDocs": {
    "description": "Swaggerについて詳細はコチラ",
    "url": "http://swagger.io"
  }
}`))
}
